The Builder design pattern is used to construct a complex object step by step.
It allows you to create different types and representations of an object using the same construction process.
This pattern is particularly useful when you need to create an object that requires multiple steps to assemble.

Example2 Scenario
Let's consider an example where we need to build a House with different parts
such as walls, roof, and doors. The construction of these parts can vary, and
we want to ensure that the construction process is flexible and manageable.

Explanation
House Class: This class represents the complex object to be constructed.
It has setters for each part of the house (walls, roof, doors).

Builder Interface: The HouseBuilder interface defines methods for building the
different parts of the house and a method to get the final constructed house.

Concrete Builder: The ConcreteHouseBuilder class implements the HouseBuilder interface.
It constructs each part of the house and returns the final house object.

Director: The HouseDirector class constructs the house by calling the builder's methods in a
specific order. It takes a builder as a parameter in its constructor.

Client Code: The client code creates a ConcreteHouseBuilder instance and a HouseDirector instance.
The director constructs the house using the builder, and the final house is printed to the console.